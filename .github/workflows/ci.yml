name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ] # OS options
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]          # Python versions
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: recipe_db
          POSTGRES_USER: SEPP
          POSTGRES_PASSWORD: prototype
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python with caching
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"  # Automatically cache pip dependencies

      - name: Setup PostgreSQL on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo -u postgres psql -c "CREATE USER SEPP WITH PASSWORD 'prototype';"
          sudo -u postgres psql -c "ALTER USER SEPP WITH SUPERUSER;"
      
      - name: Setup PostgreSQL on macOS
        if: runner.os == 'macOS'
        run: |
          brew install postgresql
          brew services start postgresql
          sleep 5
          createuser -s SEPP
          psql postgres -c "ALTER USER SEPP WITH PASSWORD 'prototype';"
      
      - name: Setup PostgreSQL on Windows
        if: runner.os == 'Windows'
        run: |
          choco install postgresql --version=15.3
          # Add PostgreSQL bin to PATH
          $env:Path += ";C:\Program Files\PostgreSQL\15\bin"
          psql -U postgres -c "CREATE USER SEPP WITH PASSWORD 'prototype';"
          psql -U postgres -c "ALTER USER SEPP WITH SUPERUSER;"
        env:
          PGPASSWORD: prototype

      # Step 3: Cache PostgreSQL data (OS-specific)
      - name: Cache PostgreSQL data for Linux
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: /var/lib/postgresql
          key: linux-postgresql-${{ hashFiles('**/requirements.txt') }}
          restore-keys: linux-postgresql-

      - name: Cache PostgreSQL data for macOS
        if: runner.os == 'macOS'
        uses: actions/cache@v3
        with:
          path: /usr/local/var/postgres
          key: macos-postgresql-${{ hashFiles('**/requirements.txt') }}
          restore-keys: macos-postgresql-

      - name: Cache PostgreSQL data for Windows
        if: runner.os == 'Windows'
        uses: actions/cache@v3
        with:
          path: C:\Program Files\PostgreSQL
          key: windows-postgresql-${{ hashFiles('**/requirements.txt') }}
          restore-keys: windows-postgresql-

      # Step 4: Install PostgreSQL dynamically for each OS
      - name: Install PostgreSQL on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y postgresql libpq-dev
          pg_config > linux_pg_config.txt

      - name: Install PostgreSQL on macOS
        if: runner.os == 'macOS'
        run: |
          brew install postgresql
          pg_config > macos_pg_config.txt

      - name: Install PostgreSQL on Windows
        if: runner.os == 'Windows'
        run: |
          choco install postgresql
          setx PATH "%PATH%;C:\\Program Files\\PostgreSQL\\15\\bin"  # Adjust for version 15
          pg_config > windows_pg_config.txt

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip freeze > requirements_installed.txt

      # Step 6: Initialize Database
      - name: Setup PostgreSQL Database
        run: |
          psql -h localhost -p 5432 -U SEPP -d recipe_db -f scripts/init.sql
        env:
          PGPASSWORD: prototype
      
      # Step 7: Run tests with log output
      - name: Run Tests
        run: |
          pytest test.py -v --log-cli-level=INFO > test_logs_${{ matrix.os }}_py${{ matrix.python-version }}.log
        env:
          DB_NAME: recipe_db
          DB_USER: SEPP
          DB_PASSWORD: prototype
          DB_HOST: localhost
          DB_PORT: 5432
      
      # Step 8: Upload artifacts
      - name: Upload PostgreSQL, dependency, and test log artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ci-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            linux_pg_config.txt
            macos_pg_config.txt
            windows_pg_config.txt
            requirements_installed.txt
            test_logs_${{ matrix.os }}_py${{ matrix.python-version }}.log
          retention-days: 7
