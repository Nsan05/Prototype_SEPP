name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ] # OS options
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]          # Python versions

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python with caching
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"  # Automatically cache pip dependencies

      # Step 3: Cache PostgreSQL data (OS-specific)
      - name: Cache PostgreSQL data for Linux
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: /var/lib/postgresql
          key: linux-postgresql-${{ hashFiles('**/requirements.txt') }}
          restore-keys: linux-postgresql-

      - name: Cache PostgreSQL data for macOS
        if: runner.os == 'macOS'
        uses: actions/cache@v3
        with:
          path: /usr/local/var/postgres
          key: macos-postgresql-${{ hashFiles('**/requirements.txt') }}
          restore-keys: macos-postgresql-

      - name: Cache PostgreSQL data for Windows
        if: runner.os == 'Windows'
        uses: actions/cache@v3
        with:
          path: C:\Program Files\PostgreSQL
          key: windows-postgresql-${{ hashFiles('**/requirements.txt') }}
          restore-keys: windows-postgresql-

      # Step 4: Install PostgreSQL dynamically for each OS
      - name: Install PostgreSQL on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y postgresql libpq-dev
          pg_config > linux_pg_config.txt

      - name: Install PostgreSQL on macOS
        if: runner.os == 'macOS'
        run: |
          brew install postgresql
          pg_config > macos_pg_config.txt

      - name: Install PostgreSQL on Windows
        if: runner.os == 'Windows'
        run: |
          choco install postgresql
          setx PATH "%PATH%;C:\\Program Files\\PostgreSQL\\15\\bin"  # Adjust for version 15
          pg_config > windows_pg_config.txt

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip freeze > requirements_installed.txt

      # Upload artifacts for PostgreSQL and dependencies installations
      - name: Upload PostgreSQL and dependency artifacts
        uses: actions/upload-artifact@v3
        with:
          name: postgres-config-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: |
            *_pg_config.txt
            requirements_installed.txt
          retention-days: 7
          
      # # Step 6: Run tests with pytest
      # - name: Run tests
      #   run: |
      #     pytest --log-cli-level=INFO > pytest.log
      #   continue-on-error: false

      # # Step 7: Upload test logs as artifacts
      # - name: Upload test logs
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-logs-${{ matrix.os }}-python-${{ matrix.python-version }}
      #     path: pytest.log
